{"version":3,"sources":["components/InputForm.js","components/modelSelect.js","App.js","reportWebVitals.js","index.js","components/modelSelect.module.css"],"names":["InputForm","props","className","onSubmit","handleSubmit","value","reviewText","onChange","e","setReviewText","target","type","ModelSelect","onValueChanged","selectContainer","selectRow","for","id","checked","onClick","App","text","useState","machineLearningResponse","setMachineLearningResponse","modelSelect","setModel","evt","a","preventDefault","url","fetch","response","content","formatted_content","replaceAll","rel","href","split","map","str","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iQAWeA,MATR,SAAmBC,GACxB,OACE,uBAAMC,UAAU,aAAaC,SAAUF,EAAMG,aAA7C,UACE,0BAAUC,MAAOJ,EAAMK,WAAYC,SAAU,SAAAC,GAAC,OAAIP,EAAMQ,cAAcD,EAAEE,OAAOL,UAC/E,uBAAOM,KAAK,SAASN,MAAM,e,OCsBlBO,EA1BK,SAAC,GAA+B,IAA7BP,EAA4B,EAA5BA,MAAOQ,EAAqB,EAArBA,eAC5B,OACE,sBAAKX,UAAWY,kBAAhB,UACE,sBAAKZ,UAAWa,YAAhB,UACE,uBAAOC,IAAI,aAAX,kBACA,uBACEC,GAAG,aACHN,KAAK,QACLO,SAAUb,EACVc,QAAS,kBAAMN,GAAe,SAIlC,sBAAKX,UAAWa,YAAhB,UACE,uBAAOC,IAAI,YAAX,iBACA,uBACEC,GAAG,YACHN,KAAK,QACLO,QAASb,EACTc,QAAS,kBAAMN,GAAe,aCsCzBO,MAlDf,WAAgB,IAJKC,EAIN,EACuBC,mBAAS,0BADhC,mBACNhB,EADM,KACMG,EADN,OAEiDa,mBAAS,IAF1D,mBAENC,EAFM,KAEmBC,EAFnB,OAGmBF,oBAAS,GAH5B,mBAGNG,EAHM,KAGOC,EAHP,KAKPtB,EAAY,uCAAG,WAAOuB,GAAP,qBAAAC,EAAA,6DACnBD,EAAIE,iBACJL,EACE,qDAEIM,EALa,8EAMjBL,EAAc,IAAM,IANH,oBAOPnB,GAPO,SAQIyB,MAAMD,GARV,cAQbE,EARa,gBASGA,EAASX,OATZ,OASbY,EATa,OAUbC,EAAoBD,EAAQE,WAAW,IAAK,MAClDX,EAA2BU,GAXR,4CAAH,sDAclB,OACE,qBAAKhC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,2DACA,sBAAKA,UAAU,YAAf,UACE,+SACsQ,mBAAGQ,OAAO,SAAS0B,IAAI,aAAaC,KAAK,mDAAzC,0BADtQ,6BAGA,+BACE,yEACA,+DAEF,iEACkC,mBAAG3B,OAAO,SAAS0B,IAAI,aAAaC,KAAK,gEAAzC,kBADlC,yFAIF,cAAC,EAAD,CACEhC,MAAOoB,EACPZ,eAAgB,SAACR,GAAD,OAAWqB,EAASrB,MAEtC,cAAC,EAAD,CACEC,WAAYA,EACZG,cAAeA,EACfL,aAAcA,KA9CHiB,EAgDAE,EA/CZF,EAAKiB,MAAM,MAAMC,KAAI,SAACC,EAAKC,GAAN,OAAgB,4BAAgBD,GAARC,aCMvCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,gBAAkB,qCAAqC,UAAY,kC","file":"static/js/main.ec873c66.chunk.js","sourcesContent":["import React from 'react';\n\nexport function InputForm(props) {\n  return (\n    <form className=\"input-form\" onSubmit={props.handleSubmit}>\n      <textarea value={props.reviewText} onChange={e => props.setReviewText(e.target.value)} />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n\nexport default InputForm\n","import { selectContainer, selectRow } from \"./modelSelect.module.css\";\n\nconst ModelSelect = ({ value, onValueChanged }) => {\n  return (\n    <div className={selectContainer}>\n      <div className={selectRow}>\n        <label for=\"LSTMButton\">LSTM</label>\n        <input\n          id=\"LSTMButton\"\n          type=\"radio\"\n          checked={!value}\n          onClick={() => onValueChanged(false)}\n        ></input>\n      </div>\n\n      <div className={selectRow}>\n        <label for=\"kNNButton\">kNN</label>\n        <input\n          id=\"kNNButton\"\n          type=\"radio\"\n          checked={value}\n          onClick={() => onValueChanged(true)}\n        ></input>\n      </div>\n    </div>\n  );\n};\n\nexport default ModelSelect;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport InputForm from \"./components/InputForm\";\nimport ModelSelect from \"./components/modelSelect\";\n\nfunction NewlineText(text) {\n  return text.split(\"\\n\").map((str, index) => <p key={index}>{str}</p>);\n}\n\nfunction App() {\n  const [reviewText, setReviewText] = useState(\"Write your review here\");\n  const [machineLearningResponse, setMachineLearningResponse] = useState(\"\");\n  const [modelSelect, setModel] = useState(false);\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n    setMachineLearningResponse(\n      \"Calculating results... (this might take som time)\"\n    );\n    const url = `https://europe-west1-tdt4173-ml-project.cloudfunctions.net/function-${\n      modelSelect ? \"2\" : \"1\"\n    }?message=${reviewText}`;\n    const response = await fetch(url);\n    const content = await response.text();\n    const formatted_content = content.replaceAll(\"|\", \"\\n\");\n    setMachineLearningResponse(formatted_content);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>TDT4173 project - webpage</h2>\n        <div className=\"info-text\">\n          <p>\n            This website is related to a project in the course TDT4173 – Machine Learning at NTNU. The goal of the project was to try out two different machine learning techniques on the same classification problem – to predict the numbers of stars for the reviews in the <a target=\"_blank\" rel=\"noreferrer\" href=\"https://www.kaggle.com/yelp-dataset/yelp-dataset\">yelp dataset</a>. The methods used are:\n          </p>\n          <ul>\n            <li>k nearest neighbours using bag-of-words</li>\n            <li>LSTM using word embeddings</li>\n          </ul>\n          <p>\n            The project report can be found <a target=\"_blank\" rel=\"noreferrer\" href=\"http://folk.ntnu.no/simehol/maskinlaering/TDT4173_project.pdf\">here</a>. To experiment with how the models perform on new data, try out the form below:\n          </p>\n        </div>\n        <ModelSelect\n          value={modelSelect}\n          onValueChanged={(value) => setModel(value)}\n        />\n        <InputForm\n          reviewText={reviewText}\n          setReviewText={setReviewText}\n          handleSubmit={handleSubmit}\n        />\n        {NewlineText(machineLearningResponse)}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectContainer\":\"modelSelect_selectContainer__1WxyL\",\"selectRow\":\"modelSelect_selectRow__3MIxl\"};"],"sourceRoot":""}